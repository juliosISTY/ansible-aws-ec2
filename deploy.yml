---
- name: "Deploy EC2 instance on AWS"
  hosts: localhost
  #become: true
  vars:
    ansible_connection: local
  pre_tasks:
    - name: Install boto stuff 
      pip: 
        name: "{{ item }}" 
        executable: /usr/bin/pip3 
      loop:
        - boto3
        - botocore

  tasks:
    # tasks file for deploy-infra
    - name: Create a security group for server
      ec2_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Deploy Production Server
      ec2_instance:
        security_group: "{{ security_group_name }}"
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_ubuntu }}"
        wait: yes
        wait_timeout: 600
        volumes:
          - device_name: /dev/sda1
            gp2:
              volume_size: 20
              delete_on_termination: yes
        #count: 1
        vpc_subnet_id: "{{ subnet }}"
        network:
          assign_public_ip: yes
        region: "{{ region }}"
        instance_ids: "{{ id_token }}"
      register: ec2

    - name: Get public IP adress of production server
      set_fact: public_ip="{{ item.public_ip }}"
      with_items: "{{ ec2.instances }}"
      register: public_ip

    - name: Add the newly created host {{ public_ip }} to ec2 group
      add_host:
        name: "{{ item.public_ip }}"
        groups: "{{ host_group_name }}"
      with_items: "{{ ec2.instances }}"

    - name: Add tag to instance {{ public_ip }}
      ec2_tag:
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: "present"
        tags:
          Name: "ansible training"
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up server {{ public_ip }}
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        state: started
      with_items: "{{ ec2.instances }}"


- name: "Apache installation using docker"
  hosts: "{{ host_group_name }}"
  become: true
  remote_user: ubuntu
  vars_files:
    - group_vars/all.yml
  roles:
    - geerlingguy.pip
    - geerlingguy.docker
  
  tasks:
    - name: Create Apache container
      docker_container:
        name: webapp
        image: httpd
        ports:
          - "80:80"
